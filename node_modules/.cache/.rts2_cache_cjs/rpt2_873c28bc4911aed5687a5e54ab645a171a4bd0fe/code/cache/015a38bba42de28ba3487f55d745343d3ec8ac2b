{"code":"require('dotenv').config();\r\nimport util from 'util';\r\nimport amqp from 'amqplib';\r\nimport validateEnv from './utils/validateEnv';\r\nexport class Base {\r\n    user;\r\n    password;\r\n    host;\r\n    port;\r\n    vhost;\r\n    url;\r\n    constructor(config) {\r\n        if (!this.canUseEnvConfig(config)) {\r\n            this.user = config.user;\r\n            this.password = config.password;\r\n            this.host = config.host;\r\n            this.port = config.port;\r\n            this.vhost = config.vhost;\r\n        }\r\n        else {\r\n            validateEnv();\r\n        }\r\n        this.url = util.format('amqp://%s:%s@%s:%s/%s', this.user || process.env.RABBITMQ_USER, this.password || process.env.RABBITMQ_PASSWORD, this.host || process.env.RABBITMQ_HOST, this.port || process.env.RABBITMQ_PORT, this.vhost || process.env.RABBITMQ_VHOST);\r\n    }\r\n    canUseEnvConfig(config) {\r\n        return config.useEnvironmentConfig !== undefined;\r\n    }\r\n    async connect(url) {\r\n        const conn = await amqp.connect(url);\r\n        const channel = await conn.createChannel();\r\n        return channel;\r\n    }\r\n    async send(message) {\r\n        const channel = await this.connect(this.url);\r\n        channel.assertQueue(message.queue, {\r\n            durable: true,\r\n        });\r\n        channel.sendToQueue(message.queue, Buffer.from(message.data));\r\n        console.log(' [x] Sent %s', message.data);\r\n    }\r\n}\r\n","references":["/Users/israelayokunnu/Documents/Work/Knack/BE/NPM packages/knack-mq/node_modules/util/util.js","/Users/israelayokunnu/Documents/Work/Knack/BE/NPM packages/knack-mq/node_modules/@types/amqplib/index.d.ts","/Users/israelayokunnu/Documents/Work/Knack/BE/NPM packages/knack-mq/src/utils/types.ts","/Users/israelayokunnu/Documents/Work/Knack/BE/NPM packages/knack-mq/src/utils/validateEnv.ts"],"dts":{"name":"/Users/israelayokunnu/Documents/Work/Knack/BE/NPM packages/knack-mq/dist/base.d.ts","writeByteOrderMark":false,"text":"import { IConfig, IEnvConfig, IMessage } from './utils/types';\r\nexport declare abstract class Base {\r\n    private user;\r\n    private password;\r\n    private host;\r\n    private port;\r\n    private vhost;\r\n    private url;\r\n    constructor(config: IConfig | IEnvConfig);\r\n    private canUseEnvConfig;\r\n    private connect;\r\n    protected send(message: IMessage): Promise<void>;\r\n}\r\n"}}
